{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\easy-club\\\\React\\\\src\\\\Components\\\\Enterprise\\\\NewCard\\\\NewCard.js\";\nimport React, { Component } from 'react';\nimport Lotery from './Lotery';\nimport \"../../Public.css\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { connect } from 'react-redux';\nimport { Button, Form, Header, Divider, Dimmer, Loader, Message } from 'semantic-ui-react';\nimport CardDetails from \"./CardDetails\";\nimport { postNewCard, updateCard } from \"../../../Store/actions/EnterpriseAction\";\nimport axios from 'axios';\nimport onSignUp from \"../../Service/onSubmit\";\n\nclass NewCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lotery: {\n        new: {\n          header: \"Lottery For Newers\",\n          active: false,\n          LoteryType: \"Discount\",\n          Sum: \"\",\n          SumType: \"$\",\n          Num1: \"\",\n          Num2: \"\",\n          Addition: \"\",\n          ExpireDate: \"\",\n          Type: 1,\n          Expiration: \"\"\n        },\n        birthday: {\n          header: \"Lottery For Birthday\",\n          active: false,\n          LoteryType: \"Discount\",\n          Sum: \"\",\n          SumType: \"$\",\n          Num1: \"\",\n          Num2: \"\",\n          Addition: \"\",\n          ExpireDate: \"\",\n          Type: 2,\n          Expiration: \"\"\n        },\n        club_members: {\n          header: \"Lottery For Club Members\",\n          active: false,\n          LoteryType: \"Discount\",\n          Sum: \"\",\n          SumType: \"$\",\n          Num1: \"\",\n          Num2: \"\",\n          Addition: \"\",\n          ExpireDate: \"\",\n          Type: 3,\n          Expiration: \"\"\n        }\n      },\n      cardError: false,\n      cardForm: {\n        Cost: {\n          valid: true,\n          label: \"Price For Customer\",\n          icon: \"$\",\n          type: 'number',\n          step: 5,\n          text: \"Price For Customer\",\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        CountPoints: {\n          valid: true,\n          label: \"CountPoints\",\n          icon: \" = 1 $\",\n          type: 'number',\n          text: \"CountPoints\",\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        Type: {\n          valid: true,\n          options: [{\n            key: \"Basic\",\n            text: 'Basic card',\n            value: 'Basic card'\n          }, {\n            key: \"Primium\",\n            text: 'Primium card',\n            value: 'Primium card'\n          }],\n          label: \"Card Type\",\n          text: \"Card Type\",\n          value: \"\",\n          validation: {\n            required: true\n          }\n        },\n        Img: {\n          valid: true,\n          label: 'Card Image',\n          value: \"\",\n          text: \"Img\",\n          validation: {\n            required: true,\n            img: true\n          }\n        },\n        Duration: {\n          valid: true,\n          label: 'Valid Time',\n          value: \"\",\n          step: 1,\n          type: \"number\",\n          text: \"Valid Time\",\n          validation: {\n            required: true\n          }\n        },\n        FileName: {\n          valid: true,\n          validation: {\n            required: true\n          },\n          value: \"\"\n        }\n      },\n      defaultValue: 0\n    };\n\n    this.onSelectCard = (event, {\n      value\n    }) => {\n      this.setState({\n        trySend: false,\n        cardError: \"\"\n      });\n      const form = { ...this.state.cardForm\n      };\n      const input = { ...form[\"Type\"]\n      };\n      input.value = value;\n      form[\"Type\"] = input;\n      this.setState({\n        cardForm: form\n      });\n    };\n\n    this.convertImg = event => {\n      const file = event.target.files[0];\n\n      if (file) {\n        var name = file.name;\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        console.log(reader);\n\n        reader.onload = () => {\n          this.onChangeCard(String(reader.result), \"Img\");\n          this.onChangeCard(name, \"FileName\");\n        };\n      }\n    };\n\n    this.onChangeCard = (value, id) => {\n      this.setState({\n        trySend: false,\n        cardError: \"\"\n      });\n      const form = { ...this.state.cardForm\n      };\n      const input = { ...form[id]\n      };\n\n      if (input.type === \"number\") {\n        input.value = parseInt(value);\n      } else {\n        input.value = value;\n      }\n\n      form[id] = input;\n      this.setState({\n        cardForm: form\n      });\n    };\n\n    this.onClick = (event, type) => {\n      event.preventDefault();\n      const lotery = { ...this.state.lotery\n      };\n      const loterySelected = { ...lotery[type]\n      };\n      loterySelected.active = !loterySelected.active;\n      lotery[type] = loterySelected;\n      this.setState({\n        lotery: lotery\n      });\n    };\n\n    this.onChangeLottery = (value, id, type) => {\n      const form = { ...this.state.lotery\n      };\n      const loterySelected = { ...form[type]\n      };\n      loterySelected[id] = value;\n      form[type] = loterySelected;\n      this.setState({\n        lotery: form\n      });\n    };\n\n    this.onSelectLottery = (event, {\n      value\n    }, type) => {\n      const form = { ...this.state.lotery\n      };\n      const loterySelected = { ...form[type]\n      };\n\n      if (value.length > 1) {\n        for (let x in loterySelected) {\n          if (x !== \"active\" && x !== \"header\" && x !== \"Type\" && x !== \"SumType\") {\n            loterySelected[x] = \"\";\n          }\n        }\n\n        loterySelected.LoteryType = value;\n      } else loterySelected.SumType = value;\n\n      form[type] = loterySelected;\n      this.setState({\n        lotery: form\n      });\n    };\n\n    this.onSubmit = () => {\n      const form = { ...this.state.cardForm\n      };\n      const obj = onSignUp(form);\n\n      if (obj === null) {\n        const card = {};\n\n        for (let x in this.state.cardForm) {\n          card[x] = this.state.cardForm[x].value;\n        }\n\n        const data = { ...card\n        };\n        const lottery = [];\n        var cnt = 0;\n\n        for (let x in this.state.lotery) {\n          if (this.state.lotery[x].active === true) lottery[cnt++] = { ...this.state.lotery[x]\n          };\n        }\n\n        console.log(lottery);\n        data['Lotery'] = [...lottery];\n        data['EnterpId'] = this.props.enterprise.C_id;\n\n        if (this.props.location.pathname === '/enetrprises/UpdateEnterpCard') {\n          data['C_id'] = this.props.indexedCard.C_id;\n          this.props.loadingNewCard(true);\n          updateCard(data).then(x => {\n            this.props.loadingNewCard(false);\n            this.props.history.replace(\"/enterprises/enterpCards\");\n            alert(\"updated\");\n          }).catch(x => {\n            this.props.loadingNewCard(false);\n            this.props.errorFiled(x.response.data.Message);\n          });\n        } else {\n          this.props.loadingNewCard(true);\n          postNewCard(data).then(x => {\n            this.props.loadingNewCard(false);\n            this.props.history.replace('clearing');\n          }).catch(x => {\n            this.props.loadingNewCard(false);\n            this.props.errorFiled(x.response.data.Message);\n          });\n        }\n      } else {\n        this.setState({\n          cardForm: form,\n          trySend: true,\n          cardError: obj.error\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.location.pathname === '/enetrprises/UpdateEnterpCard') {\n      const cardForm = { ...this.state.cardForm\n      };\n\n      for (let x in cardForm) {\n        cardForm[x].value = this.props.indexedCard[x];\n      }\n\n      this.setState({\n        cardForm: cardForm\n      });\n      const defaultValue = this.props.indexedCard['Type'] === cardForm['Type'].options[0].value ? 0 : 1;\n      this.setState({\n        defaultValue: defaultValue\n      });\n      const lottery = { ...this.state.lotery\n      };\n      const arr = this.props.indexedCard.Lotery;\n      console.log(arr);\n\n      for (let x in arr) {\n        const type = arr[x].Type === 1 ? \"new\" : arr[x].Type === 2 ? \"birthday\" : \"club_members\";\n        const myLottery = { ...lottery[type]\n        };\n\n        for (let item in myLottery) {\n          const myarr = { ...arr[x]\n          };\n\n          if (item !== \"header\" && item !== \"active\") {\n            if (item === \"ExpireDate\") {\n              myLottery[item] = new Date(myarr[item]); //     var expireDate2 = new Date(myLottery[item]);\n              //     console.log(myarr[item])\n              //    expireDate1.getDate()+\"/\"+expireDate.getMonth()+\"/\"+expireDate.getFullYear()\n              //   expireDate2.setDate(expireDate1.getDate());\n              //   myLottery[item]=expireDate2\n\n              console.log(myLottery[item]);\n            } else myLottery[item] = myarr[item];\n          }\n\n          myLottery.active = true;\n        }\n\n        lottery[type] = myLottery;\n      }\n\n      this.setState({\n        lotery: lottery\n      });\n    } else {\n      console.log(\"new\");\n    }\n  } //card\n\n\n  render() {\n    const array = [];\n\n    for (let x in this.state.lotery) {\n      array.push({\n        id: x,\n        config: this.state.lotery[x]\n      });\n    }\n\n    console.log(this.state.cardForm);\n    console.log(this.props.enterp_loading);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        marginTop: \"13vh\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        width: '30vw',\n        marginLeft: '35vw',\n        marginTop: '5vh',\n        textAlign: 'center',\n        fontSize: '180%',\n        color: 'rgb(40, 44, 52)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }\n    }, this.props.location.pathname === '/enetrprises/UpdateEnterpCard' ? \"Update Card\" : \"New Card\"), /*#__PURE__*/React.createElement(CardDetails, {\n      trySend: this.state.trySend,\n      defaultValue: this.state.defaultValue,\n      location: this.props.location.pathname,\n      error: this.state.cardError,\n      convertImg: this.convertImg,\n      onSelect: this.onSelectCard,\n      onChange: this.onChangeCard,\n      form: { ...this.state.cardForm\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"left\",\n      style: {\n        marginLeft: \"1vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }\n    }, \" Lotteries \"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }\n    }, array.map(x => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: x.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 32\n        }\n      }, /*#__PURE__*/React.createElement(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Header, {\n        as: \"h4\",\n        color: \"teal\",\n        textAlign: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginRight: \"3vw\",\n          marginLeft: \"1vw\"\n        },\n        onClick: event => this.onClick(event, x.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 33\n        }\n      }, x.config.active ? \"Delete\" : \"Insert\"), x.config.header), console.log(x.id), x.config.active == true ? /*#__PURE__*/React.createElement(Lotery, {\n        index: x.id,\n        onSelect: this.onSelectLottery,\n        onChange: this.onChangeLottery,\n        form: x.config,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 56\n        }\n      }) : \"\");\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"teal\",\n      style: {\n        fontSize: \"18px\",\n        marginTop: \"9vh\",\n        padding: \"2vh\",\n        width: \"25%\",\n        backgroundColor: \"#282c34\",\n        marginLeft: \"38%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }\n    }, this.props.location.pathname === '/enetrprises/UpdateEnterpCard' ? \"Save Changes\" : \"Submit And Pay\")), /*#__PURE__*/React.createElement(Dimmer, {\n      id: \"dimmer\",\n      active: this.props.enterp_loading,\n      inverted: \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 21\n      }\n    }, \"Loading\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }\n    }, this.props.error), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        color: \"red\",\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }\n    }, this.state.cardError));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    enterprise: state.enterprise.enterprise,\n    enterp_loading: state.enterprise.loading,\n    error: state.enterprise.error,\n    cards: state.enterprise.cards,\n    indexedCard: state.enterprise.indexedCard\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadingNewCard: status => dispatch({\n      type: \"LOADING\",\n      payload: status\n    }),\n    errorFiled: errorMsg => dispatch({\n      type: \"ERROR\",\n      payload: errorMsg\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewCard);","map":{"version":3,"sources":["D:/Programming/easy-club/React/src/Components/Enterprise/NewCard/NewCard.js"],"names":["React","Component","Lotery","connect","Button","Form","Header","Divider","Dimmer","Loader","Message","CardDetails","postNewCard","updateCard","axios","onSignUp","NewCard","state","lotery","new","header","active","LoteryType","Sum","SumType","Num1","Num2","Addition","ExpireDate","Type","Expiration","birthday","club_members","cardError","cardForm","Cost","valid","label","icon","type","step","text","value","validation","required","CountPoints","options","key","Img","img","Duration","FileName","defaultValue","onSelectCard","event","setState","trySend","form","input","convertImg","file","target","files","name","reader","FileReader","readAsDataURL","console","log","onload","onChangeCard","String","result","id","parseInt","onClick","preventDefault","loterySelected","onChangeLottery","onSelectLottery","length","x","onSubmit","obj","card","data","lottery","cnt","props","enterprise","C_id","location","pathname","indexedCard","loadingNewCard","then","history","replace","alert","catch","errorFiled","response","error","componentDidMount","arr","myLottery","item","myarr","Date","render","array","push","config","enterp_loading","position","marginTop","width","marginLeft","textAlign","fontSize","color","map","marginRight","padding","backgroundColor","mapStateToProps","loading","cards","mapDispatchToProps","dispatch","status","payload","errorMsg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Lotery from './Lotery';\r\nimport \"../../Public.css\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { connect } from 'react-redux'\r\nimport { Button, Form, Header, Divider, Dimmer, Loader, Message } from 'semantic-ui-react';\r\nimport CardDetails from \"./CardDetails\"\r\nimport { postNewCard, updateCard } from \"../../../Store/actions/EnterpriseAction\"\r\nimport axios from 'axios';\r\nimport onSignUp from \"../../Service/onSubmit\";\r\nclass NewCard extends Component {\r\n    state = {\r\n        lotery: {\r\n            new: {\r\n                header: \"Lottery For Newers\",\r\n                active: false,\r\n                LoteryType: \"Discount\",\r\n                Sum: \"\",\r\n                SumType: \"$\",\r\n                Num1: \"\",\r\n                Num2: \"\",\r\n                Addition: \"\",\r\n                ExpireDate: \"\",\r\n                Type: 1,\r\n                Expiration: \"\"\r\n            },\r\n            birthday: {\r\n                header: \"Lottery For Birthday\",\r\n                active: false,\r\n                LoteryType: \"Discount\",\r\n                Sum: \"\",\r\n                SumType: \"$\",\r\n                Num1: \"\",\r\n                Num2: \"\",\r\n                Addition: \"\",\r\n                ExpireDate: \"\",\r\n                Type: 2,\r\n                Expiration: \"\",\r\n            },\r\n            club_members: {\r\n                header: \"Lottery For Club Members\",\r\n                active: false,\r\n                LoteryType: \"Discount\",\r\n                Sum: \"\",\r\n                SumType: \"$\",\r\n                Num1: \"\",\r\n                Num2: \"\",\r\n                Addition: \"\",\r\n                ExpireDate: \"\",\r\n                Type: 3,\r\n                Expiration: \"\",\r\n            },\r\n        },\r\n        cardError: false,\r\n        cardForm: {\r\n            Cost: {\r\n                valid: true,\r\n                label: \"Price For Customer\",\r\n                icon: \"$\",\r\n                type: 'number',\r\n                step: 5,\r\n                text: \"Price For Customer\",\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                }\r\n            },\r\n            CountPoints: {\r\n                valid: true,\r\n                label: \"CountPoints\",\r\n                icon: \" = 1 $\",\r\n                type: 'number',\r\n                text: \"CountPoints\",\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                }\r\n            },\r\n            Type: {\r\n                valid: true,\r\n                options: [{ key: \"Basic\", text: 'Basic card', value: 'Basic card' },\r\n                { key: \"Primium\", text: 'Primium card', value: 'Primium card' }],\r\n                label: \"Card Type\",\r\n                text: \"Card Type\",\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                },\r\n\r\n            },\r\n            Img: {\r\n                valid: true,\r\n                label: 'Card Image',\r\n                value: \"\",\r\n                text: \"Img\",\r\n                validation: {\r\n                    required: true,\r\n                    img: true,\r\n                }\r\n            },\r\n            Duration: {\r\n                valid: true,\r\n                label: 'Valid Time',\r\n                value: \"\",\r\n                step: 1,\r\n                type: \"number\",\r\n                text: \"Valid Time\",\r\n                validation: {\r\n                    required: true,\r\n                }\r\n            },\r\n            FileName: {\r\n                valid: true,\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                value: \"\"\r\n            },\r\n        },\r\n        defaultValue: 0,\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.location.pathname === '/enetrprises/UpdateEnterpCard') {\r\n            const cardForm = { ...this.state.cardForm };\r\n            for (let x in cardForm) {\r\n                cardForm[x].value = this.props.indexedCard[x];\r\n            }\r\n            this.setState({ cardForm: cardForm })\r\n            const defaultValue = this.props.indexedCard['Type'] === cardForm['Type'].options[0].value ? 0 : 1;\r\n            this.setState({ defaultValue: defaultValue });\r\n            const lottery = { ...this.state.lotery };\r\n            const arr = this.props.indexedCard.Lotery;\r\n            console.log(arr)\r\n            for (let x in arr) {\r\n                const type = arr[x].Type === 1 ? \"new\" : arr[x].Type === 2 ? \"birthday\" : \"club_members\";\r\n                const myLottery = { ...lottery[type] };\r\n                for (let item in myLottery) {\r\n                    const myarr = { ...arr[x] }\r\n                    if (item !== \"header\" && item !== \"active\") {\r\n                        if (item === \"ExpireDate\") {\r\n                            myLottery[item] = new Date(myarr[item]);\r\n                            //     var expireDate2 = new Date(myLottery[item]);\r\n                            //     console.log(myarr[item])\r\n                            //    expireDate1.getDate()+\"/\"+expireDate.getMonth()+\"/\"+expireDate.getFullYear()\r\n                            //   expireDate2.setDate(expireDate1.getDate());\r\n                            //   myLottery[item]=expireDate2\r\n                            console.log(myLottery[item])\r\n                        }\r\n                        else\r\n                            myLottery[item] = myarr[item];\r\n                    }\r\n                    myLottery.active = true;\r\n                }\r\n                lottery[type] = myLottery;\r\n            }\r\n            this.setState({ lotery: lottery })\r\n        }\r\n        else {\r\n            console.log(\"new\")\r\n        }\r\n    }\r\n    //card\r\n    onSelectCard = (event, { value }) => {\r\n        this.setState({ trySend: false, cardError: \"\" })\r\n        const form = { ...this.state.cardForm }\r\n        const input = { ...form[\"Type\"] }\r\n        input.value = value;\r\n        form[\"Type\"] = input\r\n        this.setState({ cardForm: form })\r\n    }\r\n    convertImg = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            var name = file.name;\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            console.log(reader)\r\n            reader.onload = () => {\r\n                this.onChangeCard(String(reader.result), \"Img\")\r\n                this.onChangeCard(name, \"FileName\")\r\n            }\r\n        }\r\n    }\r\n    onChangeCard = (value, id) => {\r\n        this.setState({ trySend: false, cardError: \"\" })\r\n        const form = { ...this.state.cardForm }\r\n        const input = { ...form[id] }\r\n        if (input.type === \"number\") {\r\n            input.value = parseInt(value);\r\n        }\r\n        else {\r\n            input.value = value;\r\n        }\r\n        form[id] = input\r\n        this.setState({ cardForm: form })\r\n    }\r\n    onClick = (event, type) => {\r\n        event.preventDefault();\r\n        const lotery = { ...this.state.lotery };\r\n        const loterySelected = { ...lotery[type] };\r\n        loterySelected.active = !loterySelected.active;\r\n        lotery[type] = loterySelected;\r\n        this.setState({ lotery: lotery })\r\n    }\r\n    //lottery\r\n    onChangeLottery = (value, id, type) => {\r\n        const form = { ...this.state.lotery };\r\n        const loterySelected = { ...form[type] };\r\n        loterySelected[id] = value;\r\n        form[type] = loterySelected;\r\n        this.setState({ lotery: form });\r\n    }\r\n    onSelectLottery = (event, { value }, type) => {\r\n        const form = { ...this.state.lotery };\r\n        const loterySelected = { ...form[type] };\r\n        if (value.length > 1) {\r\n            for (let x in loterySelected) {\r\n                if (x !== \"active\" && x !== \"header\" && x !== \"Type\" && x !== \"SumType\") {\r\n                    loterySelected[x] = \"\";\r\n                }\r\n            }\r\n            loterySelected.LoteryType = value;\r\n        }\r\n        else\r\n            loterySelected.SumType = value;\r\n        form[type] = loterySelected;\r\n        this.setState({ lotery: form });\r\n    }\r\n    //main form\r\n    onSubmit = () => {\r\n        const form = { ...this.state.cardForm }\r\n        const obj = onSignUp(form)\r\n        if (obj === null) {\r\n            const card = {}\r\n            for (let x in this.state.cardForm) {\r\n                card[x] = this.state.cardForm[x].value;\r\n            }\r\n            const data = { ...card };\r\n            const lottery = []\r\n            var cnt = 0;\r\n            for (let x in this.state.lotery) {\r\n                if (this.state.lotery[x].active === true)\r\n                    lottery[cnt++] = { ...this.state.lotery[x] };\r\n            }\r\n            console.log(lottery)\r\n            data['Lotery'] = [...lottery];\r\n            data['EnterpId'] = this.props.enterprise.C_id;\r\n            if (this.props.location.pathname === '/enetrprises/UpdateEnterpCard') {\r\n                data['C_id'] = this.props.indexedCard.C_id;\r\n                this.props.loadingNewCard(true);\r\n                updateCard(data).then(x => {\r\n                    this.props.loadingNewCard(false);\r\n                    this.props.history.replace(\"/enterprises/enterpCards\")\r\n                    alert(\"updated\")\r\n                }).catch(x => {\r\n                    this.props.loadingNewCard(false);\r\n                    this.props.errorFiled(x.response.data.Message)\r\n                })\r\n            }\r\n            else {\r\n                this.props.loadingNewCard(true);\r\n                postNewCard(data).then(x => {\r\n                    this.props.loadingNewCard(false);\r\n                    this.props.history.replace('clearing');\r\n                }).catch(x => {\r\n                    this.props.loadingNewCard(false);\r\n                    this.props.errorFiled(x.response.data.Message)\r\n                })\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ cardForm: form, trySend: true, cardError: obj.error });\r\n        }\r\n    }\r\n    render() {\r\n        const array = [];\r\n        for (let x in this.state.lotery) {\r\n            array.push({ id: x, config: this.state.lotery[x] })\r\n        }\r\n        console.log(this.state.cardForm)\r\n        console.log(this.props.enterp_loading)\r\n        return (\r\n            <div style={{ position: \"absolute\", marginTop: \"13vh\", width: \"100%\" }}>\r\n                <h1 style={{ width: '30vw', marginLeft: '35vw', marginTop: '5vh', textAlign: 'center', fontSize: '180%', color: 'rgb(40, 44, 52)' }}>{this.props.location.pathname === '/enetrprises/UpdateEnterpCard' ? \"Update Card\" : \"New Card\"}</h1>\r\n                <CardDetails trySend={this.state.trySend} defaultValue={this.state.defaultValue} location={this.props.location.pathname} error={this.state.cardError} convertImg={this.convertImg} onSelect={this.onSelectCard} onChange={this.onChangeCard} form={{ ...this.state.cardForm }}></CardDetails>\r\n                <Header as='h2' color='teal' textAlign='left' style={{ marginLeft: \"1vw\" }}> Lotteries </Header>\r\n                <Form onSubmit={this.onSubmit}>\r\n                    {array.map((x) => {\r\n                        return <div key={x.id}>\r\n                            <Divider></Divider>\r\n                            <Header as='h4' color='teal' textAlign='left'>\r\n                                <Button style={{ marginRight: \"3vw\", marginLeft: \"1vw\" }} onClick={event => this.onClick(event, x.id)}>{x.config.active ? \"Delete\" : \"Insert\"}</Button>\r\n                                {x.config.header}\r\n                            </Header>\r\n                            {console.log(x.id)}\r\n                            {x.config.active == true ? <Lotery index={x.id} onSelect={this.onSelectLottery} onChange={this.onChangeLottery} form={x.config}></Lotery> : \"\"}\r\n                        </div>\r\n                    })}\r\n                    <Button type=\"submit\" color='teal' style={{ fontSize: \"18px\", marginTop: \"9vh\", padding: \"2vh\", width: \"25%\", backgroundColor: \"#282c34\", marginLeft: \"38%\" }}>{this.props.location.pathname === '/enetrprises/UpdateEnterpCard' ? \"Save Changes\" : \"Submit And Pay\"}</Button>\r\n                </Form>\r\n                <Dimmer id='dimmer' active={this.props.enterp_loading} inverted='false'>\r\n                    <Loader size='large'>Loading</Loader>\r\n                </Dimmer>\r\n                <div style={{ color: \"red\", textAlign: \"center\" }}>{this.props.error}</div>\r\n                <div style={{ color: \"red\", textAlign: \"center\" }}>{this.state.cardError}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        enterprise: state.enterprise.enterprise,\r\n        enterp_loading: state.enterprise.loading,\r\n        error: state.enterprise.error,\r\n        cards: state.enterprise.cards,\r\n        indexedCard: state.enterprise.indexedCard,\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        loadingNewCard: (status) => dispatch({ type: \"LOADING\", payload: status }),\r\n        errorFiled: (errorMsg) => dispatch({ type: \"ERROR\", payload: errorMsg }),\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewCard);\r\n"]},"metadata":{},"sourceType":"module"}