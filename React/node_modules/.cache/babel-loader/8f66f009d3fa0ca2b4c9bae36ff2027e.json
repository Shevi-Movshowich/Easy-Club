{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\easy-club\\\\React\\\\src\\\\Components\\\\NewPassword\\\\NewPassword.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Grid, Header, Image, Message, Segment, Step } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { NavLink, withRouter, useLocation, Prompt } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\nclass newPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: \"\",\n      confirm_password: \"\"\n    };\n\n    this.changePassword = () => {\n      document.getElementById(\"message\").innerHTML = \"\";\n\n      if (this.state.password === \"\") {\n        document.getElementsByClassName(\"password\")[0].classList.add(\"error\");\n        document.getElementById(\"message\").innerHTML = \"password is required\";\n      } else {\n        if (this.state.confirm_password === \"\") {\n          document.getElementsByClassName(\"confirm_password\")[0].classList.add(\"error\");\n          document.getElementById(\"message\").innerHTML = \"confirm_password is required\";\n        } else {\n          if (this.state.confirm_password !== this.state.password) {\n            document.getElementsByClassName(\"confirm_password\")[0].classList.add(\"error\");\n            document.getElementById(\"message\").innerHTML = \"confirm password is incorrect\";\n          } else {\n            let search = this.props.location.search;\n            console.log(search);\n            let params = new URLSearchParams(search);\n            console.log(params);\n            let key = params.get('key');\n            let date = params.get('date');\n\n            if (this.props.location.pathname == '/users/newpassword') {\n              axios.post(`http://localhost:64430/api/Users?key=${key}&password=${this.state.password}`).then(x => {\n                console.log(x.data);\n                document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\n              }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\n            } else {\n              axios.post(`http://localhost:64430/api/Enterprises?key=${key}&password=${this.state.password}`).then(x => {\n                console.log(x.data);\n                document.getElementById(\"message\").innerHTML = x.data;\n                document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\n              }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\n            }\n          }\n        }\n      }\n    };\n\n    this.handleChangePassword = e => {\n      this.setState({\n        password: e.target.value\n      });\n      document.getElementsByClassName(\"password\")[0].classList.remove(\"error\");\n      document.getElementsByClassName(\"confirm_password\")[0].classList.remove(\"error\");\n    };\n\n    this.handleChangeConfirmPassword = e => {\n      this.setState({\n        confirm_password: e.target.value\n      });\n      document.getElementsByClassName(\"confirm_password\")[0].classList.remove(\"error\");\n      document.getElementsByClassName(\"password\")[0].classList.remove(\"error\");\n    };\n  }\n\n  componentWillMount() {\n    let search = this.props.location.search;\n    console.log(search);\n    let params = new URLSearchParams(search);\n    let date = params.get('date');\n    console.log(date);\n    this.props.selectSendDate(date); // console.log(moment(date.tostring()).format(\"dd.mm.yyyy hh:MM:ss\"));\n    // const today = new Date(date.toString());\n    // console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(today));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: \"/Images/logo.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }), \" New Password\"), /*#__PURE__*/React.createElement(Form, {\n      size: \"tiny\",\n      onSubmit: this.changePassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      stacked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      className: \"password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"password\",\n      type: \"password\",\n      onChange: this.handleChangePassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Form.Input, {\n      className: \"confirm_password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"confirm password\",\n      type: \"password\",\n      onChange: this.handleChangeConfirmPassword // className={!value.valid?'error':null}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message\",\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"teal\",\n      fluid: true,\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }, \"Change Password\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.user,\n    enterprise: state.enterprise.enterprise,\n    date: state.user.user.SendDate\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectSendDate: date => dispatch({\n      type: \"SELECT_SEND_DATE\",\n      payload: date\n    }),\n    selectUser: user => dispatch({\n      type: \"SELECT_USER\",\n      payload: user\n    }),\n    selectEnterprise: enterprise => dispatch({\n      type: \"SELECT_ENTERPRISE\",\n      payload: enterprise\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(newPassword);","map":{"version":3,"sources":["D:/Programming/easy-club/React/src/Components/NewPassword/NewPassword.js"],"names":["React","Component","Button","Form","Grid","Header","Image","Message","Segment","Step","NavLink","withRouter","useLocation","Prompt","axios","connect","moment","newPassword","state","password","confirm_password","changePassword","document","getElementById","innerHTML","getElementsByClassName","classList","add","search","props","location","console","log","params","URLSearchParams","key","get","date","pathname","post","then","x","data","catch","response","handleChangePassword","e","setState","target","value","remove","handleChangeConfirmPassword","componentWillMount","selectSendDate","render","height","maxWidth","color","mapStateToProps","user","enterprise","SendDate","mapDispatchToProps","dispatch","type","payload","selectUser","selectEnterprise"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Form, Grid, Header, Image, Message, Segment ,Step} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { NavLink, withRouter, useLocation, Prompt } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nclass newPassword extends Component {\r\n    state = {\r\n        password: \"\",\r\n        confirm_password: \"\",\r\n    }\r\n    componentWillMount() {\r\n        let search = this.props.location.search;\r\n        console.log(search);\r\n        let params = new URLSearchParams(search);\r\n        let date = params.get('date');\r\n        console.log(date);\r\n        this.props.selectSendDate(date);\r\n        // console.log(moment(date.tostring()).format(\"dd.mm.yyyy hh:MM:ss\"));\r\n        // const today = new Date(date.toString());\r\n        // console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(today));\r\n    }\r\n    changePassword = () => {\r\n        document.getElementById(\"message\").innerHTML = \"\";\r\n        if (this.state.password === \"\") {\r\n            document.getElementsByClassName(\"password\")[0].classList.add(\"error\");\r\n            document.getElementById(\"message\").innerHTML = \"password is required\"\r\n        }\r\n        else {\r\n            if (this.state.confirm_password === \"\") {\r\n                document.getElementsByClassName(\"confirm_password\")[0].classList.add(\"error\");\r\n                document.getElementById(\"message\").innerHTML = \"confirm_password is required\"\r\n            }\r\n            else {\r\n                if (this.state.confirm_password !== this.state.password) {\r\n                    document.getElementsByClassName(\"confirm_password\")[0].classList.add(\"error\");\r\n                    document.getElementById(\"message\").innerHTML = \"confirm password is incorrect\";\r\n                }\r\n                else {\r\n                    let search = this.props.location.search;\r\n                    console.log(search);\r\n                    let params = new URLSearchParams(search);\r\n                    console.log(params);\r\n                    let key = params.get('key');\r\n                    let date = params.get('date');\r\n                    if (this.props.location.pathname == '/users/newpassword') {\r\n                        axios.post(`http://localhost:64430/api/Users?key=${key}&password=${this.state.password}`).then(x => {\r\n                            console.log(x.data);\r\n                            document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\r\n                        }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\r\n                    }\r\n                    else {\r\n                        axios.post(`http://localhost:64430/api/Enterprises?key=${key}&password=${this.state.password}`).then(x => {\r\n                            console.log(x.data);\r\n                            document.getElementById(\"message\").innerHTML = x.data;\r\n                            document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\r\n                        }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    handleChangePassword = (e) => {\r\n        this.setState({ password: e.target.value })\r\n        document.getElementsByClassName(\"password\")[0].classList.remove(\"error\");\r\n        document.getElementsByClassName(\"confirm_password\")[0].classList.remove(\"error\");\r\n    }\r\n    handleChangeConfirmPassword = (e) => {\r\n        this.setState({ confirm_password: e.target.value })\r\n        document.getElementsByClassName(\"confirm_password\")[0].classList.remove(\"error\");\r\n        document.getElementsByClassName(\"password\")[0].classList.remove(\"error\");\r\n    }\r\n    render() {\r\n        return (\r\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                <Grid.Column style={{ maxWidth: 450 }}>\r\n                    <Header as='h2' color='teal' textAlign='center'>\r\n                        <Image src='/Images/logo.png' /> New Password</Header>\r\n                    <Form size='tiny' onSubmit={this.changePassword}>\r\n                        <Segment stacked>\r\n                            <Form.Input className=\"password\"\r\n                                fluid icon='lock'\r\n                                iconPosition='left'\r\n                                placeholder='password'\r\n                                type='password'\r\n                                onChange={this.handleChangePassword}\r\n                            />\r\n                            <Form.Input className=\"confirm_password\"\r\n                                fluid\r\n                                icon='lock'\r\n                                iconPosition='left'\r\n                                placeholder='confirm password'\r\n                                type='password'\r\n                                onChange={this.handleChangeConfirmPassword}\r\n                            // className={!value.valid?'error':null}\r\n                            />\r\n                            <div id=\"message\" style={{ color: \"red\" }}></div>\r\n                            <Button type=\"submit\" color='teal' fluid size='large' >\r\n                                Change Password\r\n  </Button>\r\n\r\n                        </Segment>\r\n                    </Form>\r\n                </Grid.Column>\r\n                {/* <Step completed></Step> */}\r\n            </Grid>\r\n            \r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user.user,\r\n        enterprise: state.enterprise.enterprise,\r\n        date: state.user.user.SendDate\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        selectSendDate: (date) => dispatch({ type: \"SELECT_SEND_DATE\", payload: date }),\r\n        selectUser: (user) => dispatch({ type: \"SELECT_USER\", payload: user }),\r\n        selectEnterprise: (enterprise) => dispatch({ type: \"SELECT_ENTERPRISE\", payload: enterprise }),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(newPassword);"]},"metadata":{},"sourceType":"module"}