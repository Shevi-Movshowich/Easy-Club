{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\easy-club\\\\React\\\\src\\\\Components\\\\NewPassword\\\\NewPassword.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { NavLink, withRouter, useLocation, Prompt } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\n\nclass newPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: \"\",\n      confirm_password: \"\"\n    };\n\n    this.changePassword = () => {\n      document.getElementById(\"message\").innerHTML = \"\";\n      let search = this.props.location.search;\n      console.log(search);\n      let params = new URLSearchParams(search);\n      console.log(params);\n      let key = params.get('key');\n\n      if (this.props.location.pathname == '/users/newpassword') {\n        axios.post(`http://localhost:64430/api/Users?key=${key}&password=${this.state.password}`).then(x => {\n          console.log(x.data);\n        }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\n      } else {\n        axios.post(`http://localhost:64430/api/Enterprises?key=${key}&password=${this.state.password}`).then(x => {\n          console.log(x.data);\n          document.getElementById(\"message\").innerHTML = x.data;\n        }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\n      }\n    };\n\n    this.onChangeHandler = event => {\n      this.setState({\n        confirm_password: event.target.value\n      });\n      if (this.state.confirm_password !== this.state.password) event.target.style.borderColor = 'red';\n    };\n  }\n\n  componentWillMount() {\n    let search = this.props.location.search;\n    console.log(search);\n    let params = new URLSearchParams(search);\n    let date = params.get('date');\n    console.log(date);\n    this.props.selectSendDate(date); // console.log(moment(date.tostring()).format(\"dd.mm.yyyy hh:MM:ss\"));\n    // const today = new Date(date.toString());\n    // console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(today));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: \"/Images/logo.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }), \" New Password\"), /*#__PURE__*/React.createElement(Form, {\n      size: \"tiny\",\n      onSubmit: this.changePassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      stacked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      className: \"password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"password\",\n      required: true // error\n      ,\n      type: \"password\",\n      onChange: event => this.setState({\n        password: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Form.Input, {\n      className: \"confirm_password\",\n      fluid: true,\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"confirm password\",\n      type: \"password\",\n      required: true,\n      onChange: event => this.onChangeHandler(event) // className={!value.valid?'error':null}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message\",\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"teal\",\n      fluid: true,\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, \"Change Password\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.user,\n    enterprise: state.enterprise.enterprise,\n    date: state.user.user.SendDate\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectSendDate: date => dispatch({\n      type: \"SELECT_SEND_DATE\",\n      payload: date\n    }),\n    selectUser: user => dispatch({\n      type: \"SELECT_USER\",\n      payload: user\n    }),\n    selectEnterprise: enterprise => dispatch({\n      type: \"SELECT_ENTERPRISE\",\n      payload: enterprise\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(newPassword);","map":{"version":3,"sources":["D:/Programming/easy-club/React/src/Components/NewPassword/NewPassword.js"],"names":["React","Component","Button","Form","Grid","Header","Image","Message","Segment","NavLink","withRouter","useLocation","Prompt","axios","connect","moment","newPassword","state","password","confirm_password","changePassword","document","getElementById","innerHTML","search","props","location","console","log","params","URLSearchParams","key","get","pathname","post","then","x","data","catch","response","onChangeHandler","event","setState","target","value","style","borderColor","componentWillMount","date","selectSendDate","render","height","maxWidth","color","mapStateToProps","user","enterprise","SendDate","mapDispatchToProps","dispatch","type","payload","selectUser","selectEnterprise"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,EAA6BC,MAA7B,EAAqCC,KAArC,EAA4CC,OAA5C,EAAqDC,OAArD,QAAoE,mBAApE;AACA,OAAO,kCAAP;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,WAA9B,EAA2CC,MAA3C,QAAyD,kBAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,WAAN,SAA0Bf,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAChCgB,KADgC,GACxB;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,gBAAgB,EAAE;AAFd,KADwB;;AAAA,SAgBhCC,cAhBgC,GAgBf,MAAM;AACnBC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+C,EAA/C;AACA,UAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBF,MAAjC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,UAAIK,MAAM,GAAG,IAAIC,eAAJ,CAAoBN,MAApB,CAAb;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,UAAIE,GAAG,GAAGF,MAAM,CAACG,GAAP,CAAW,KAAX,CAAV;;AACA,UAAI,KAAKP,KAAL,CAAWC,QAAX,CAAoBO,QAApB,IAAgC,oBAApC,EAA0D;AACtDpB,QAAAA,KAAK,CAACqB,IAAN,CAAY,wCAAuCH,GAAI,aAAY,KAAKd,KAAL,CAAWC,QAAS,EAAvF,EAA0FiB,IAA1F,CAA+FC,CAAC,IAAI;AAChGT,UAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAC,CAACC,IAAd;AACH,SAFD,EAEGC,KAFH,CAESF,CAAC,IAAIf,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+Ca,CAAC,CAACG,QAAF,CAAWF,IAAX,CAAgB9B,OAF7E;AAGH,OAJD,MAKK;AACDM,QAAAA,KAAK,CAACqB,IAAN,CAAY,8CAA6CH,GAAI,aAAY,KAAKd,KAAL,CAAWC,QAAS,EAA7F,EAAgGiB,IAAhG,CAAqGC,CAAC,IAAI;AACtGT,UAAAA,OAAO,CAACC,GAAR,CAAYQ,CAAC,CAACC,IAAd;AACAhB,UAAAA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+Ca,CAAC,CAACC,IAAjD;AACH,SAHD,EAGGC,KAHH,CAGSF,CAAC,IAAIf,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,SAAnC,GAA+Ca,CAAC,CAACG,QAAF,CAAWF,IAAX,CAAgB9B,OAH7E;AAIH;AACJ,KAlC+B;;AAAA,SAmChCiC,eAnCgC,GAmCbC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AAAEvB,QAAAA,gBAAgB,EAAEsB,KAAK,CAACE,MAAN,CAAaC;AAAjC,OAAd;AACA,UAAI,KAAK3B,KAAL,CAAWE,gBAAX,KAA8B,KAAKF,KAAL,CAAWC,QAA7C,EACIuB,KAAK,CAACE,MAAN,CAAaE,KAAb,CAAmBC,WAAnB,GAA+B,KAA/B;AACP,KAvC+B;AAAA;;AAKhCC,EAAAA,kBAAkB,GAAG;AACjB,QAAIvB,MAAM,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBF,MAAjC;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,QAAIK,MAAM,GAAG,IAAIC,eAAJ,CAAoBN,MAApB,CAAb;AACA,QAAIwB,IAAI,GAAGnB,MAAM,CAACG,GAAP,CAAW,MAAX,CAAX;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYoB,IAAZ;AACA,SAAKvB,KAAL,CAAWwB,cAAX,CAA0BD,IAA1B,EANiB,CAOjB;AACA;AACA;AACH;;AAyBDE,EAAAA,MAAM,GAAG;AACL,wBAEI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAyB,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhC;AAAqD,MAAA,aAAa,EAAC,QAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,KAAK,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,kBADJ,eAGI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAkB,MAAA,QAAQ,EAAE,KAAKhC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAS,MAAA,OAAO,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,UAAtB;AACI,MAAA,KAAK,MADT;AACU,MAAA,IAAI,EAAC,MADf;AAEI,MAAA,YAAY,EAAC,MAFjB;AAGI,MAAA,WAAW,EAAC,UAHhB;AAII,MAAA,QAAQ,MAJZ,CAKI;AALJ;AAMI,MAAA,IAAI,EAAC,UANT;AAOI,MAAA,QAAQ,EAAGqB,KAAD,IAAW,KAAKC,QAAL,CAAc;AAAExB,QAAAA,QAAQ,EAAEuB,KAAK,CAACE,MAAN,CAAaC;AAAzB,OAAd,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAUI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,kBAAtB;AACI,MAAA,KAAK,MADT;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,YAAY,EAAC,MAHjB;AAII,MAAA,WAAW,EAAC,kBAJhB;AAKI,MAAA,IAAI,EAAC,UALT;AAMI,MAAA,QAAQ,MANZ;AAOI,MAAA,QAAQ,EAAGH,KAAD,IAAW,KAAKD,eAAL,CAAqBC,KAArB,CAPzB,CAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVJ,eAoBI;AAAK,MAAA,EAAE,EAAC,SAAR;AAAkB,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBJ,eAqBI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAC,MAA5B;AAAmC,MAAA,KAAK,MAAxC;AAAyC,MAAA,IAAI,EAAC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBArBJ,CADJ,CAHJ,CADJ,CAFJ;AAqCH;;AA9E+B;;AAgFpC,MAAMC,eAAe,GAAGrC,KAAK,IAAI;AAC7B,SAAO;AACHsC,IAAAA,IAAI,EAAEtC,KAAK,CAACsC,IAAN,CAAWA,IADd;AAEHC,IAAAA,UAAU,EAAEvC,KAAK,CAACuC,UAAN,CAAiBA,UAF1B;AAGHR,IAAAA,IAAI,EAAE/B,KAAK,CAACsC,IAAN,CAAWA,IAAX,CAAgBE;AAHnB,GAAP;AAKH,CAND;;AAOA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHV,IAAAA,cAAc,EAAGD,IAAD,IAAUW,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAEb;AAArC,KAAD,CAD/B;AAEHc,IAAAA,UAAU,EAAGP,IAAD,IAAUI,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAEN;AAAhC,KAAD,CAF3B;AAGHQ,IAAAA,gBAAgB,EAAGP,UAAD,IAAgBG,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,mBAAR;AAA6BC,MAAAA,OAAO,EAAEL;AAAtC,KAAD;AAHvC,GAAP;AAKH,CAND;;AAQA,eAAe1C,OAAO,CAACwC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6C1C,WAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Form, Grid, Header, Image, Message, Segment } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { NavLink, withRouter, useLocation, Prompt } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\nclass newPassword extends Component {\r\n    state = {\r\n        password: \"\",\r\n        confirm_password: \"\",\r\n    }\r\n    componentWillMount() {\r\n        let search = this.props.location.search;\r\n        console.log(search);\r\n        let params = new URLSearchParams(search);\r\n        let date = params.get('date');\r\n        console.log(date);\r\n        this.props.selectSendDate(date);\r\n        // console.log(moment(date.tostring()).format(\"dd.mm.yyyy hh:MM:ss\"));\r\n        // const today = new Date(date.toString());\r\n        // console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(today));\r\n    }\r\n    changePassword = () => {\r\n        document.getElementById(\"message\").innerHTML = \"\";\r\n        let search = this.props.location.search;\r\n        console.log(search);\r\n        let params = new URLSearchParams(search);\r\n        console.log(params);\r\n        let key = params.get('key');\r\n        if (this.props.location.pathname == '/users/newpassword') {\r\n            axios.post(`http://localhost:64430/api/Users?key=${key}&password=${this.state.password}`).then(x => {\r\n                console.log(x.data);\r\n            }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\r\n        }\r\n        else {\r\n            axios.post(`http://localhost:64430/api/Enterprises?key=${key}&password=${this.state.password}`).then(x => {\r\n                console.log(x.data);\r\n                document.getElementById(\"message\").innerHTML = x.data;\r\n            }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\r\n        }\r\n    }\r\n    onChangeHandler = (event) => {\r\n        this.setState({ confirm_password: event.target.value })\r\n        if (this.state.confirm_password!==this.state.password)\r\n            event.target.style.borderColor='red'\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                <Grid.Column style={{ maxWidth: 450 }}>\r\n                    <Header as='h2' color='teal' textAlign='center'>\r\n                        <Image src='/Images/logo.png' /> New Password</Header>\r\n                    <Form size='tiny' onSubmit={this.changePassword}>\r\n                        <Segment stacked>\r\n                            <Form.Input className=\"password\"\r\n                                fluid icon='lock'\r\n                                iconPosition='left'\r\n                                placeholder='password'\r\n                                required\r\n                                // error\r\n                                type='password'\r\n                                onChange={(event) => this.setState({ password: event.target.value })}\r\n                            />\r\n                            <Form.Input className=\"confirm_password\"\r\n                                fluid\r\n                                icon='lock'\r\n                                iconPosition='left'\r\n                                placeholder='confirm password'\r\n                                type='password'\r\n                                required\r\n                                onChange={(event) => this.onChangeHandler(event)}\r\n                            // className={!value.valid?'error':null}\r\n                            />\r\n                            <div id=\"message\" style={{ color: \"red\" }}></div>\r\n                            <Button type=\"submit\" color='teal' fluid size='large' >\r\n                                Change Password\r\n  </Button>\r\n\r\n                        </Segment>\r\n                    </Form>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user.user,\r\n        enterprise: state.enterprise.enterprise,\r\n        date: state.user.user.SendDate\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        selectSendDate: (date) => dispatch({ type: \"SELECT_SEND_DATE\", payload: date }),\r\n        selectUser: (user) => dispatch({ type: \"SELECT_USER\", payload: user }),\r\n        selectEnterprise: (enterprise) => dispatch({ type: \"SELECT_ENTERPRISE\", payload: enterprise }),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(newPassword);"]},"metadata":{},"sourceType":"module"}