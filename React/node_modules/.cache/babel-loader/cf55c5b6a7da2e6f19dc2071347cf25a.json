{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\easy-club\\\\React\\\\src\\\\Components\\\\NewPassword\\\\NewPassword.js\";\nimport React, { Component } from 'react';\nimport { Button, Form, Grid, Header, Image, Loader, Dimmer, Segment } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { NavLink, withRouter, useLocation, Prompt } from 'react-router-dom';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\n\nclass newPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: {\n        password: {\n          value: \"\",\n          text: \"Password\",\n          validation: {\n            required: true,\n            password: true\n          }\n        },\n        confirm_password: {\n          value: \"\",\n          text: \"Confirm password\",\n          validation: {\n            required: true,\n            password: true\n          }\n        }\n      }\n    };\n\n    this.changePassword = () => {\n      document.getElementById(\"message\").innerHTML = \"\";\n\n      if (this.state.confirm_password === this.state.password) {\n        let search = this.props.location.search;\n        console.log(search);\n        let params = new URLSearchParams(search);\n        console.log(params);\n        let key = params.get('key');\n        let date = params.get('date');\n\n        if (this.props.location.pathname == '/users/newpassword') {\n          axios.post(`http://localhost:64430/api/Users?key=${key}&password=${this.state.password}`).then(x => {\n            console.log(x.data);\n            document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\n          }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\n        } else {\n          axios.post(`http://localhost:64430/api/Enterprises?key=${key}&password=${this.state.password}`).then(x => {\n            console.log(x.data);\n            document.getElementById(\"message\").innerHTML = x.data;\n            document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\n          }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\n        }\n      } else document.getElementById(\"message\").innerHTML = \"confirm password is incorrect\";\n    };\n  }\n\n  componentWillMount() {\n    let search = this.props.location.search;\n    console.log(search);\n    let params = new URLSearchParams(search);\n    let date = params.get('date');\n    console.log(date);\n    this.props.selectSendDate(date); // console.log(moment(date.tostring()).format(\"dd.mm.yyyy hh:MM:ss\"));\n    // const today = new Date(date.toString());\n    // console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(today));\n  }\n\n  // onChangeHandler = (event) => {\n  //     \n  //     if (this.state.confirm_password!==this.state.password)\n  //         event.target.style.borderColor='red'\n  // }\n  render() {\n    const array = [];\n\n    for (let x in this.state.form) {\n      array.push({\n        id: x,\n        config: this.state.form[x]\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      textAlign: \"center\",\n      style: {\n        height: '100vh'\n      },\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: \"/Images/logo.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }), \" Sign-Up to your account\"), /*#__PURE__*/React.createElement(Form, {\n      size: \"large\",\n      onSubmit: this.SignUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Segment, {\n      stacked: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, array.map((x, i) => {\n      return /*#__PURE__*/React.createElement(Form.Input, {\n        key: i,\n        iconPosition: \"left\",\n        type: \"text\",\n        onChange: event => this.setState({\n          x: event.target.value\n        }),\n        className: this.state.trySend && !this.state.form[x.id].valid ? \"error\" : x.id,\n        placeholder: x.config.text + \"*\",\n        icon: \"lock\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 40\n        }\n      });\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"message\",\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, this.state.errorMessage), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"teal\",\n      fluid: true,\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }, \"Change Password\"))))), /*#__PURE__*/React.createElement(Dimmer, {\n      active: this.state.loading,\n      inverted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Loading\")));\n  } //     render() {\n  //         return (\n  //             <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n  //                 <Grid.Column style={{ maxWidth: 450 }}>\n  //                     <Header as='h2' color='teal' textAlign='center'>\n  //                         <Image src='/Images/logo.png' /> New Password</Header>\n  //                     <Form size='tiny' onSubmit={this.changePassword}>\n  //                         <Segment stacked>\n  //                             <Form.Input className=\"password\"\n  //                                 fluid icon='lock'\n  //                                 iconPosition='left'\n  //                                 placeholder='password'\n  //                                 required\n  //                                 // error\n  //                                 type='password'\n  //                                 onChange={(event) => this.setState({ password: event.target.value })}\n  //                             />\n  //                             <Form.Input className=\"confirm_password\"\n  //                                 fluid\n  //                                 icon='lock'\n  //                                 iconPosition='left'\n  //                                 placeholder='confirm password'\n  //                                 type='password'\n  //                                 required\n  //                                 onChange={(event) => this.setState({ confirm_password: event.target.value })}\n  //                             // className={!value.valid?'error':null}\n  //                             />\n  //                             <div id=\"message\" style={{ color: \"red\" }}></div>\n  //                             <Button type=\"submit\" color='teal' fluid size='large' >\n  //                                 Change Password\n  //   </Button>\n  //                         </Segment>\n  //                     </Form>\n  //                 </Grid.Column>\n  //             </Grid>\n  //         )\n  //     }\n  // }\n\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user.user,\n    enterprise: state.enterprise.enterprise,\n    date: state.user.user.SendDate\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectSendDate: date => dispatch({\n      type: \"SELECT_SEND_DATE\",\n      payload: date\n    }),\n    selectUser: user => dispatch({\n      type: \"SELECT_USER\",\n      payload: user\n    }),\n    selectEnterprise: enterprise => dispatch({\n      type: \"SELECT_ENTERPRISE\",\n      payload: enterprise\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(newPassword);","map":{"version":3,"sources":["D:/Programming/easy-club/React/src/Components/NewPassword/NewPassword.js"],"names":["React","Component","Button","Form","Grid","Header","Image","Loader","Dimmer","Segment","NavLink","withRouter","useLocation","Prompt","axios","connect","newPassword","state","form","password","value","text","validation","required","confirm_password","changePassword","document","getElementById","innerHTML","search","props","location","console","log","params","URLSearchParams","key","get","date","pathname","post","then","x","data","catch","response","Message","componentWillMount","selectSendDate","render","array","push","id","config","height","maxWidth","SignUp","map","i","event","setState","target","trySend","valid","color","errorMessage","loading","mapStateToProps","user","enterprise","SendDate","mapDispatchToProps","dispatch","type","payload","selectUser","selectEnterprise"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Form, Grid, Header, Image, Loader, Dimmer, Segment } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { NavLink, withRouter, useLocation, Prompt } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux'\r\nclass newPassword extends Component {\r\n    state = {\r\n        form: {\r\n            password: {\r\n                value: \"\",\r\n                text: \"Password\",\r\n                validation: {\r\n                    required: true,\r\n                    password: true,\r\n                }\r\n            },\r\n            confirm_password: {\r\n                value: \"\",\r\n                text: \"Confirm password\",\r\n                validation: {\r\n                    required: true,\r\n                    password: true,\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    componentWillMount() {\r\n        let search = this.props.location.search;\r\n        console.log(search);\r\n        let params = new URLSearchParams(search);\r\n        let date = params.get('date');\r\n        console.log(date);\r\n        this.props.selectSendDate(date);\r\n        // console.log(moment(date.tostring()).format(\"dd.mm.yyyy hh:MM:ss\"));\r\n        // const today = new Date(date.toString());\r\n        // console.log(new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(today));\r\n    }\r\n    changePassword = () => {\r\n        document.getElementById(\"message\").innerHTML = \"\";\r\n        if (this.state.confirm_password === this.state.password) {\r\n            let search = this.props.location.search;\r\n            console.log(search);\r\n            let params = new URLSearchParams(search);\r\n            console.log(params);\r\n            let key = params.get('key');\r\n            let date = params.get('date');\r\n            if (this.props.location.pathname == '/users/newpassword') {\r\n                axios.post(`http://localhost:64430/api/Users?key=${key}&password=${this.state.password}`).then(x => {\r\n                    console.log(x.data);\r\n                    document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\r\n                }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\r\n            }\r\n            else {\r\n                axios.post(`http://localhost:64430/api/Enterprises?key=${key}&password=${this.state.password}`).then(x => {\r\n                    console.log(x.data);\r\n                    document.getElementById(\"message\").innerHTML = x.data;\r\n                    document.getElementById(\"message\").innerHTML = \"the password was changed successfully\";\r\n                }).catch(x => document.getElementById(\"message\").innerHTML = x.response.data.Message);\r\n            }\r\n        }\r\n        else\r\n            document.getElementById(\"message\").innerHTML = \"confirm password is incorrect\";\r\n    }\r\n    // onChangeHandler = (event) => {\r\n    //     \r\n    //     if (this.state.confirm_password!==this.state.password)\r\n    //         event.target.style.borderColor='red'\r\n    // }\r\n    render() {\r\n        const array = [];\r\n        for (let x in this.state.form) {\r\n            array.push({ id: x, config: this.state.form[x] })\r\n        }\r\n        return (<div>\r\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                <Grid.Column style={{ maxWidth: 450 }}>\r\n                    <Header as='h2' color='teal' textAlign='center'>\r\n                        <Image src='/Images/logo.png' /> Sign-Up to your account\r\n              </Header>\r\n                    <Form size='large' onSubmit={this.SignUp}>\r\n                        <Segment stacked>\r\n                            {array.map((x, i) => {\r\n                                return <Form.Input\r\n                                    key={i} iconPosition=\"left\"\r\n                                    type=\"text\"\r\n                                    onChange={event => this.setState({ x: event.target.value })}\r\n                                    className={this.state.trySend && !this.state.form[x.id].valid ? \"error\" : x.id}\r\n                                    placeholder={x.config.text + \"*\"}\r\n                                    icon=\"lock\">\r\n                                </Form.Input>\r\n                            })}\r\n                            <div id=\"message\" style={{ color: \"red\" }}>{this.state.errorMessage}</div>\r\n                            <Button type=\"submit\" color='teal' fluid size='large'>\r\n                                Change Password\r\n                        </Button>\r\n                        </Segment>\r\n                    </Form>\r\n                </Grid.Column>\r\n            </Grid>\r\n            <Dimmer active={this.state.loading} inverted>\r\n                <Loader size='large'>Loading</Loader>\r\n            </Dimmer>\r\n        </div >\r\n        )\r\n    }\r\n    //     render() {\r\n    //         return (\r\n    //             <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n    //                 <Grid.Column style={{ maxWidth: 450 }}>\r\n    //                     <Header as='h2' color='teal' textAlign='center'>\r\n    //                         <Image src='/Images/logo.png' /> New Password</Header>\r\n    //                     <Form size='tiny' onSubmit={this.changePassword}>\r\n    //                         <Segment stacked>\r\n    //                             <Form.Input className=\"password\"\r\n    //                                 fluid icon='lock'\r\n    //                                 iconPosition='left'\r\n    //                                 placeholder='password'\r\n    //                                 required\r\n    //                                 // error\r\n    //                                 type='password'\r\n    //                                 onChange={(event) => this.setState({ password: event.target.value })}\r\n    //                             />\r\n    //                             <Form.Input className=\"confirm_password\"\r\n    //                                 fluid\r\n    //                                 icon='lock'\r\n    //                                 iconPosition='left'\r\n    //                                 placeholder='confirm password'\r\n    //                                 type='password'\r\n    //                                 required\r\n    //                                 onChange={(event) => this.setState({ confirm_password: event.target.value })}\r\n    //                             // className={!value.valid?'error':null}\r\n    //                             />\r\n    //                             <div id=\"message\" style={{ color: \"red\" }}></div>\r\n    //                             <Button type=\"submit\" color='teal' fluid size='large' >\r\n    //                                 Change Password\r\n    //   </Button>\r\n\r\n    //                         </Segment>\r\n    //                     </Form>\r\n    //                 </Grid.Column>\r\n    //             </Grid>\r\n    //         )\r\n    //     }\r\n    // }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user.user,\r\n        enterprise: state.enterprise.enterprise,\r\n        date: state.user.user.SendDate\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        selectSendDate: (date) => dispatch({ type: \"SELECT_SEND_DATE\", payload: date }),\r\n        selectUser: (user) => dispatch({ type: \"SELECT_USER\", payload: user }),\r\n        selectEnterprise: (enterprise) => dispatch({ type: \"SELECT_ENTERPRISE\", payload: enterprise }),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(newPassword);"]},"metadata":{},"sourceType":"module"}