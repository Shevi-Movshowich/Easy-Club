{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\easy-club\\\\React\\\\src\\\\Components\\\\Enterprise\\\\NewCard\\\\CardDetails.js\";\nimport React, { Component } from 'react';\nimport Lotery from './Lotery';\nimport { Button, Form, Grid, Header, Image, Message, Segment, Checkbox, Select, Input, Popup, Divider, Label } from 'semantic-ui-react';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { InputFile } from 'semantic-ui-react-input-file';\nimport { Route, Switch, Redirect, Router } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { selectCard } from \"../../../Store/actions/EnterpriseAction\";\nimport axios from 'axios';\n\nclass CardDetails extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: {\n        cost: {\n          icon: 'dollar sign',\n          text: 'Card Price',\n          type: 'text',\n          maxLength: 7\n        },\n        points: {},\n        type: {\n          type: \"\",\n          options: [{\n            key: \"Basic\",\n            text: 'Basic card',\n            value: 'Basic card'\n          }, {\n            key: \"Primium\",\n            text: 'Primium card',\n            value: 'Primium card'\n          }],\n          label: \"Card Type\"\n        },\n        img: {\n          imgString: \"\",\n          fileName: \"\"\n        }\n      }\n    };\n\n    this.hanleSelctOnChange = (event, {\n      value\n    }) => {\n      this.setState({\n        type: value\n      });\n    };\n\n    this.convertImg = event => {\n      const file = event.target.files[0];\n\n      if (file) {\n        var name = file.name;\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        console.log(reader);\n\n        reader.onload = () => {\n          this.setState({\n            fileName: name\n          });\n          this.setState({\n            img: String(reader.result)\n          });\n        };\n      }\n    };\n  }\n\n  render() {\n    const array = [];\n\n    for (let x in this.state.form) {\n      array.push({\n        id: x,\n        config: this.state.form[x]\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: \"1vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        width: '30vw',\n        marginLeft: '35vw',\n        marginTop: '5vh',\n        textAlign: 'center',\n        fontSize: '180%',\n        color: 'rgb(40, 44, 52)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"New Card\"), /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, \"Card Details\"), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      label: \"Price For Customer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 32\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      label: \"$\",\n      labelPosition: \"right\",\n      maxLength: x.config.maxLength,\n      type: x.config.type // {/* // onChange={event => this.onChangeHendler(event, x.id)}\n      // // className={this.state.trySend && !this.state.form[x.id].valid ? \"error\" : x.id} */}\n      ,\n      placeholder: x.config.text + \"*\",\n      step: x.config.step,\n      checked: x.config.checked // {/* // onFocus={(e) => x.config.birthdate===true?e.target.type = 'date':\"text\"}  */}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Form.Input, {\n      label: \"Count Points\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      content: \"For example 5 point =1$\",\n      trigger: /*#__PURE__*/React.createElement(Input, {\n        type: \"number\",\n        label: \" = 1 $\",\n        labelPosition: \"right\",\n        placeholder: \"Count Points\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Form.Select, {\n      label: \"Card Type\",\n      placeholder: \"Type\",\n      options: this.state.form.type.options,\n      onChange: this.hanleSelctOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Form.Input, {\n      label: \"Enterprise Image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InputFile, {\n      class: \".ui.form .field .ui.input\",\n      button: {\n        labelPosition: \"left\",\n        label: /*#__PURE__*/React.createElement(Input, {\n          placeholder: \"select Img\",\n          value: this.state.fileName !== \"\" ? this.state.fileName : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 48\n          }\n        })\n      },\n      input: {\n        id: 'input-control-id',\n        onChange: this.convertImg\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    })))))));\n  }\n\n} // const mapStateToProps = state => {\n//     return {\n//       enterprise: state.enterprise.enterprise\n//     }\n//   }\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectCard: card => dispatch(selectCard(card))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(CardDetails);","map":{"version":3,"sources":["D:/Programming/easy-club/React/src/Components/Enterprise/NewCard/CardDetails.js"],"names":["React","Component","Lotery","Button","Form","Grid","Header","Image","Message","Segment","Checkbox","Select","Input","Popup","Divider","Label","NavLink","withRouter","InputFile","Route","Switch","Redirect","Router","connect","selectCard","axios","CardDetails","state","form","cost","icon","text","type","maxLength","points","options","key","value","label","img","imgString","fileName","hanleSelctOnChange","event","setState","convertImg","file","target","files","name","reader","FileReader","readAsDataURL","console","log","onload","String","result","render","array","x","push","id","config","marginLeft","width","marginTop","textAlign","fontSize","color","onSubmitHandler","step","checked","labelPosition","onChange","mapDispatchToProps","dispatch","card"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Lotery from './Lotery';\r\nimport { Button, Form, Grid, Header, Image, Message, Segment, Checkbox, Select, Input, Popup, Divider, Label } from 'semantic-ui-react';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { InputFile } from 'semantic-ui-react-input-file';\r\nimport { Route, Switch, Redirect, Router } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { selectCard } from \"../../../Store/actions/EnterpriseAction\"\r\nimport axios from 'axios';\r\nclass CardDetails extends Component {\r\n    state = {\r\n        form: {\r\n            cost: {\r\n                icon: 'dollar sign',\r\n                text: 'Card Price',\r\n                type: 'text',\r\n                maxLength: 7,\r\n            },\r\n            points: {\r\n\r\n            },\r\n            type: {\r\n                type: \"\",\r\n                options:[{ key: \"Basic\", text: 'Basic card', value: 'Basic card' }, { key: \"Primium\", text: 'Primium card', value: 'Primium card' }],\r\n                label:\"Card Type\",\r\n                \r\n            },\r\n            img: {\r\n                imgString: \"\",\r\n                fileName: \"\",\r\n            }\r\n        },\r\n    }\r\n    hanleSelctOnChange = (event, { value }) => {\r\n        this.setState({ type: value })\r\n    }\r\n    convertImg = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            var name = file.name;\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            console.log(reader)\r\n            reader.onload = () => {\r\n                this.setState({ fileName: name })\r\n                this.setState({ img: String(reader.result) })\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const array = [];\r\n        for (let x in this.state.form) {\r\n            array.push({ id: x, config: this.state.form[x] })\r\n        }\r\n        return (<div style={{ marginLeft: \"1vw\" }}>\r\n            <h1 style={{ width: '30vw', marginLeft: '35vw', marginTop: '5vh', textAlign: 'center', fontSize: '180%', color: 'rgb(40, 44, 52)' }}>New Card</h1>\r\n            <Header as='h2' color='teal' textAlign='left'>Card Details</Header>\r\n            <Divider></Divider>\r\n            <Form onSubmit={this.onSubmitHandler}>\r\n                <Grid> <Grid.Column><Form.Group>\r\n                               <Form.Input label=\"Price For Customer\">\r\n                                    <Input\r\n                                        label=\"$\"\r\n                                        labelPosition=\"right\"\r\n                                        maxLength={x.config.maxLength}\r\n                                        type={x.config.type}\r\n                                        // {/* // onChange={event => this.onChangeHendler(event, x.id)}\r\n                                        // // className={this.state.trySend && !this.state.form[x.id].valid ? \"error\" : x.id} */}\r\n                                        placeholder={x.config.text + \"*\"}\r\n                                        step={x.config.step}\r\n                                        checked={x.config.checked}\r\n                                    // {/* // onFocus={(e) => x.config.birthdate===true?e.target.type = 'date':\"text\"}  */}\r\n                                    />\r\n                                </Form.Input>\r\n                            <Form.Input label=\"Count Points\">\r\n                                <Popup\r\n                                    content=\"For example 5 point =1$\"\r\n                                    trigger={\r\n                                        <Input type=\"number\" label=' = 1 $' labelPosition=\"right\" placeholder='Count Points' />\r\n                                    }\r\n                                />\r\n                            </Form.Input>\r\n                            <Form.Select\r\n                                label=\"Card Type\"\r\n                                placeholder=\"Type\"\r\n                                options={this.state.form.type.options}\r\n                                onChange={this.hanleSelctOnChange}\r\n                            ></Form.Select>\r\n                            <Form.Input label=\"Enterprise Image\">\r\n                                <InputFile class=\".ui.form .field .ui.input\"\r\n                                    button={{\r\n                                        labelPosition: \"left\",\r\n                                        label: <Input placeholder=\"select Img\" value={this.state.fileName !== \"\" ? this.state.fileName : \"\"}></Input>\r\n                                    }}\r\n                                    input={{\r\n                                        id: 'input-control-id',\r\n                                        onChange: this.convertImg,\r\n                                    }}\r\n                                /></Form.Input>\r\n                        </Form.Group>\r\n                    </Grid.Column>\r\n                </Grid></Form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//       enterprise: state.enterprise.enterprise\r\n//     }\r\n//   }\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        selectCard: (card) => dispatch(selectCard(card)),\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(CardDetails);"]},"metadata":{},"sourceType":"module"}