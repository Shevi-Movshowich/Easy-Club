{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\easy-club\\\\React\\\\src\\\\Components\\\\Enterprise\\\\NewCard\\\\CardDetails.js\";\nimport React, { Component } from 'react';\nimport { Form, Grid, Header, Input, Popup, Divider } from 'semantic-ui-react';\nimport { InputFile } from 'semantic-ui-react-input-file';\nimport { connect } from 'react-redux';\nimport { selectCard } from \"../../../Store/actions/EnterpriseAction\";\nimport axios from 'axios';\n\nclass CardDetails extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: {\n        Cost: {\n          label: \"Price For Customer\",\n          Icon: \"$\",\n          Type: 'number',\n          step: 5,\n          text: \"Card Price *\",\n          value: \"\"\n        },\n        CountPoints: {\n          label: \"Count CountPoints\",\n          Icon: \" = 1 $\",\n          Type: 'number',\n          text: \"Count CountPoints *\",\n          value: \"\"\n        },\n        Type: {\n          options: [{\n            key: \"Basic\",\n            text: 'Basic card',\n            value: 'Basic card'\n          }, {\n            key: \"Primium\",\n            text: 'Primium card',\n            value: 'Primium card'\n          }],\n          label: \"Card Type\",\n          text: \"Type *\",\n          value: \"\"\n        },\n        Img: {\n          label: 'Enterprise Image',\n          value: \"\",\n          text: \"select Img\"\n        }\n      },\n      fileName: \"\"\n    };\n\n    this.hanleSelectOnChange = (event, {\n      value\n    }) => {\n      const form = { ...this.state.form\n      };\n      const input = { ...form[\"Type\"]\n      };\n      input.value = value;\n      form[\"Type\"] = input;\n      this.setState({\n        form: form\n      });\n    };\n\n    this.convertImg = event => {\n      const file = event.target.files[0];\n\n      if (file) {\n        var name = file.name;\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        console.log(reader);\n\n        reader.onload = () => {\n          this.onChangeHandler(String(reader.result), \"Img\");\n          this.setState({\n            fileName: name\n          });\n        };\n      }\n    };\n\n    this.onChangeHandler = (value, id) => {\n      const form = { ...this.state.form\n      };\n      const input = { ...form[id]\n      };\n      input.value = value;\n      form[id] = input;\n      this.setState({\n        form: form\n      });\n    };\n\n    this.onSubmitHandler = () => {\n      const data = [];\n\n      for (let x in this.state.form) {\n        data.push({\n          id: x,\n          config: this.state.form[x]\n        });\n      }\n    };\n  }\n\n  render() {\n    const form = this.state.form;\n    const array = [];\n\n    for (let x in this.state.form) {\n      array.push({\n        id: x,\n        config: this.state.form[x]\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        marginLeft: \"1vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, this.props.submit ? this.onSubmitHandler : \"\", /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        width: '30vw',\n        marginLeft: '35vw',\n        marginTop: '5vh',\n        textAlign: 'center',\n        fontSize: '180%',\n        color: 'rgb(40, 44, 52)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"New Card\"), /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"teal\",\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \"Card Details\"), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 36\n      }\n    }, /*#__PURE__*/React.createElement(Form.Input, {\n      label: form.Cost.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      label: form.Cost.icon,\n      labelPosition: \"right\",\n      Type: form.Cost.Type,\n      onChange: event => this.onChangeHandler(event.target.value, \"Cost\"),\n      value: form.Cost.value // // className={this.state.trySend && !this.state.form[x.id].valid ? \"error\" : x.id} */}\n      ,\n      placeholder: form.Cost.text,\n      step: form.Cost.step,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Form.Input, {\n      label: form.CountPoints.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      content: \"For example 5 point =1$\",\n      trigger: /*#__PURE__*/React.createElement(Input, {\n        onChange: event => this.onChangeHandler(event.target.value, \"CountPoints\"),\n        value: form.CountPoints.value,\n        Type: form.CountPoints.Type,\n        label: form.CountPoints.icon,\n        labelPosition: \"right\",\n        placeholder: form.CountPoints.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 114\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 64\n      }\n    })), /*#__PURE__*/React.createElement(Form.Select, {\n      label: form.Type.label,\n      placeholder: form.Type.text,\n      options: form.Type.options,\n      onChange: this.hanleSelectOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Form.Input, {\n      label: form.Img.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InputFile, {\n      button: {\n        labelPosition: \"left\",\n        label: /*#__PURE__*/React.createElement(Input, {\n          placeholder: form.Img.text,\n          value: this.state.fileName !== \"\" ? this.state.fileName : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 40\n          }\n        })\n      },\n      input: {\n        onChange: this.convertImg\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }))), \" \"), \" \")));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    submit: state.enterprise.submit\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    selectCard: card => dispatch(selectCard(card))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(CardDetails);","map":{"version":3,"sources":["D:/Programming/easy-club/React/src/Components/Enterprise/NewCard/CardDetails.js"],"names":["React","Component","Form","Grid","Header","Input","Popup","Divider","InputFile","connect","selectCard","axios","CardDetails","state","form","Cost","label","Icon","Type","step","text","value","CountPoints","options","key","Img","fileName","hanleSelectOnChange","event","input","setState","convertImg","file","target","files","name","reader","FileReader","readAsDataURL","console","log","onload","onChangeHandler","String","result","id","onSubmitHandler","data","x","push","config","render","array","marginLeft","props","submit","width","marginTop","textAlign","fontSize","color","icon","labelPosition","onChange","mapStateToProps","enterprise","mapDispatchToProps","dispatch","card"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {  Form, Grid, Header, Input, Popup, Divider } from 'semantic-ui-react';\r\nimport { InputFile } from 'semantic-ui-react-input-file';\r\nimport { connect } from 'react-redux'\r\nimport { selectCard } from \"../../../Store/actions/EnterpriseAction\"\r\nimport axios from 'axios';\r\nclass CardDetails extends Component {\r\n    state = {\r\n        form: {\r\n            Cost: {\r\n                label: \"Price For Customer\",\r\n                Icon: \"$\",\r\n                Type: 'number',\r\n                step: 5,\r\n                text: \"Card Price *\",\r\n                value: \"\"\r\n            },\r\n            CountPoints: {\r\n                label: \"Count CountPoints\",\r\n                Icon: \" = 1 $\",\r\n                Type: 'number',\r\n                text: \"Count CountPoints *\",\r\n                value: \"\"\r\n            },\r\n            Type: {\r\n                options: [{ key: \"Basic\", text: 'Basic card', value: 'Basic card' }, { key: \"Primium\", text: 'Primium card', value: 'Primium card' }],\r\n                label: \"Card Type\",\r\n                text: \"Type *\",\r\n                value: \"\"\r\n            },\r\n            Img: {\r\n                label: 'Enterprise Image',\r\n                value: \"\",\r\n                text: \"select Img\",\r\n            }\r\n        },\r\n        fileName: \"\",\r\n    }\r\n    hanleSelectOnChange = (event, { value }) => {\r\n        const form = { ...this.state.form }\r\n        const input = { ...form[\"Type\"] }\r\n        input.value = value;\r\n        form[\"Type\"] = input\r\n        this.setState({ form: form })\r\n    }\r\n    convertImg = (event) => {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            var name = file.name;\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            console.log(reader)\r\n            reader.onload = () => {\r\n                this.onChangeHandler(String(reader.result), \"Img\")\r\n                this.setState({ fileName: name })\r\n            }\r\n        }\r\n    }\r\n    onChangeHandler = (value, id) => {\r\n        const form = { ...this.state.form }\r\n        const input = { ...form[id] }\r\n        input.value = value;\r\n        form[id] = input\r\n        this.setState({ form: form })\r\n    }\r\n    onSubmitHandler=()=>{\r\n        const data = [];\r\n        for (let x in this.state.form) {\r\n            data.push({ id: x, config: this.state.form[x] })}\r\n    }\r\n    render() {\r\n        const form = this.state.form;\r\n        const array = [];\r\n        for (let x in this.state.form) {\r\n            array.push({ id: x, config: this.state.form[x] })\r\n        }\r\n        return (<div style={{ marginLeft: \"1vw\" }}>\r\n            {this.props.submit?this.onSubmitHandler:\"\"}\r\n            <h1 style={{ width: '30vw', marginLeft: '35vw', marginTop: '5vh', textAlign: 'center', fontSize: '180%', color: 'rgb(40, 44, 52)' }}>New Card</h1>\r\n            <Header as='h2' color='teal' textAlign='left'>Card Details</Header>\r\n            <Divider></Divider>\r\n            <Form>\r\n                <Grid><Grid.Column><Form.Group>\r\n                    <Form.Input label={form.Cost.label}>\r\n                        <Input label={form.Cost.icon} labelPosition=\"right\" Type={form.Cost.Type} onChange={event => this.onChangeHandler(event.target.value, \"Cost\")} value={form.Cost.value}\r\n                            // // className={this.state.trySend && !this.state.form[x.id].valid ? \"error\" : x.id} */}\r\n                            placeholder={form.Cost.text}\r\n                            step={form.Cost.step}\r\n                        /></Form.Input>\r\n                    <Form.Input label={form.CountPoints.label}><Popup content=\"For example 5 point =1$\" trigger={<Input onChange={event => this.onChangeHandler(event.target.value, \"CountPoints\")} value={form.CountPoints.value} Type={form.CountPoints.Type} label={form.CountPoints.icon} labelPosition=\"right\" placeholder={form.CountPoints.text} />}\r\n                    />\r\n                    </Form.Input>\r\n                    <Form.Select label={form.Type.label}  placeholder={form.Type.text} options={form.Type.options}   onChange={this.hanleSelectOnChange} ></Form.Select>\r\n                    <Form.Input label={form.Img.label}>\r\n                        <InputFile\r\n                            button={{\r\n                                labelPosition: \"left\",\r\n                                label: <Input placeholder={form.Img.text} value={this.state.fileName !== \"\" ? this.state.fileName : \"\"}></Input>\r\n                            }}\r\n                            input={{\r\n                                onChange: this.convertImg,\r\n                            }} /></Form.Input>\r\n                </Form.Group> </Grid.Column> </Grid></Form>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n     submit:state.enterprise.submit,\r\n    }\r\n  }\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        selectCard: (card) => dispatch(selectCard(card)),\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(CardDetails);"]},"metadata":{},"sourceType":"module"}